const BEARER_KEY = import.meta.env.VITE_BEARER_KEY;
const API_LANGUAGE = "uk-UA"; //"en-US";
const API_ADULTS = false;

// it's important to add prefix /react in import below
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";
import {
  ICollection,
  ICollectionSearch,
  IMovieSearch,
  ISearchResponse,
} from "../../models/tmdb.models";

// set headers for all requests, main goal is to set Authorization header
const prepareHeaders = (headers: Headers) => {
  headers.set("Accept", "application/json");
  headers.set("Authorization", `Bearer ${BEARER_KEY}`);
  return headers;
};

// set params for all requests
// TODO: think about how to set language dynamically
const prepareParams = (params: Record<string, any>) => {
  params["language"] = API_LANGUAGE;
  params["include_adult"] = API_ADULTS;
  return new URLSearchParams(params).toString();
};

export const tmdbApi = createApi({
  reducerPath: "tmdb/api",
  baseQuery: fetchBaseQuery({
    baseUrl: "https://api.themoviedb.org/3/",
    prepareHeaders: prepareHeaders,
    paramsSerializer: prepareParams,
  }),

  endpoints: (build) => ({
    // <T, Q>: T - what will be returned; Q - type of param that'll be provided by us
    searchCollection: build.query<ICollectionSearch[], string>({
      query: (term: string) => ({
        url: `search/collection`,
        params: {
          query: term,
        },
      }),
      // transformResponse - callback that will be called after request
      // here transformResponse is used to get only 'results' from response
      transformResponse: (response: ISearchResponse<ICollectionSearch>) =>
        response.results,
    }),
    getCollection: build.query<ICollection, number>({
      query: (collectionID: number) => ({
        url: `collection/${collectionID}`,
        params: prepareParams,
      }),
    }),
    searchMovie: build.query<IMovieSearch[], string>({
      query: (term: string) => ({
        url: `search/movie`,
        params: {
          query: term,
        },
      }),
      // transformResponse - callback that will be called after request
      // here transformResponse is used to get only 'results' from response
      transformResponse: (response: ISearchResponse<IMovieSearch>) =>
        response.results,
    }),
    getMovie: build.query<any, number>({
      query: (movieID: number) => ({
        url: `movie/${movieID}`,
        params: prepareParams,
      }),
    }),
  }),
});

// useSearchMultiQuery - name that automatically generated by toolkit [*]
// 'SerachMulti' - method name in 'endpoints' callback that we choose
// 'Query' - build method
export const {
  useSearchMovieQuery,
  useSearchCollectionQuery,
  useLazyGetCollectionQuery,
  useLazyGetMovieQuery,
} = tmdbApi;
